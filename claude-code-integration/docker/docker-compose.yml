# Docker Compose for Claude Code Integration & Validation Engine
# Production-ready setup with security, monitoring, and scalability

version: '3.8'

services:
  # Main validation engine
  validation-engine:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: final
    image: claude-validation:latest
    container_name: claude-validation-engine
    restart: unless-stopped
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - DATABASE_URL=postgresql://validation:${POSTGRES_PASSWORD}@postgres:5432/claude_validation
      - REDIS_URL=redis://redis:6379/0
      - CONTAINER_RUNTIME=gvisor
      - ENABLE_LEARNING=true
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app/src
    volumes:
      - ./config:/app/config:ro
      - validation-logs:/var/log/validation
      - validation-cache:/app/cache
      - validation-models:/app/ml-models
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container management
    ports:
      - "8000:8000"  # Main API
      - "8080:8080"  # WebSocket for real-time collaboration
      - "9090:9090"  # Metrics endpoint
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/tmp:rw,noexec,nosuid,size=100m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: claude-validation-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=claude_validation
      - POSTGRES_USER=validation
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/run/postgresql:rw,noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U validation -d claude_validation"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queues
  redis:
    image: redis:7-alpine
    container_name: claude-validation-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: claude-validation-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "9411:9411"    # Zipkin collector
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: claude-validation-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      - validation-engine

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: claude-validation-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      - prometheus

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: claude-validation-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      - validation-engine
      - grafana

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: claude-validation-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - validation-logs:/var/log/validation:ro
      - nginx-logs:/var/log/nginx:ro
      - fluentd-logs:/var/log/fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true

  # Container security scanning with Trivy
  trivy:
    image: aquasec/trivy:0.45.0
    container_name: claude-validation-trivy
    restart: "no"
    volumes:
      - trivy-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    command: >
      sh -c "
        trivy image --exit-code 0 --severity HIGH,CRITICAL claude-validation:latest &&
        trivy image --exit-code 0 --severity HIGH,CRITICAL postgres:15-alpine &&
        trivy image --exit-code 0 --severity HIGH,CRITICAL redis:7-alpine
      "

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: claude-validation-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data:ro
      - backup-data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - validation-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
    command: >
      sh -c "
        chmod +x /backup.sh &&
        /backup.sh
      "

# Named volumes for persistent data
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  validation-logs:
    driver: local
  validation-cache:
    driver: local
  validation-models:
    driver: local
  nginx-logs:
    driver: local
  fluentd-logs:
    driver: local
  trivy-cache:
    driver: local
  backup-data:
    driver: local

# Custom network for service isolation
networks:
  validation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: claude-validation-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

