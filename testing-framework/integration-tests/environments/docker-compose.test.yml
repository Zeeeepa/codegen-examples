version: '3.8'

services:
  # PostgreSQL database for testing
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./test-data/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test API server
  test-api:
    build:
      context: ../../..
      dockerfile: testing-framework/integration-tests/environments/Dockerfile.test-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=test
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock external services
  mock-github:
    image: wiremock/wiremock:latest
    ports:
      - "8080:8080"
    volumes:
      - ./fixtures/wiremock:/home/wiremock
    command: ["--global-response-templating", "--verbose"]

  mock-claude:
    image: wiremock/wiremock:latest
    ports:
      - "8081:8080"
    volumes:
      - ./fixtures/claude-mock:/home/wiremock
    command: ["--global-response-templating", "--verbose"]

  # MCP server for testing
  mcp-server:
    build:
      context: ../../..
      dockerfile: testing-framework/integration-tests/environments/Dockerfile.mcp-server
    ports:
      - "9000:9000"
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Load balancer for testing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./fixtures/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - test-api

  # Monitoring stack for testing
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./fixtures/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./fixtures/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./fixtures/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  default:
    name: testing-network

