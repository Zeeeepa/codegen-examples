version: '3.8'

services:
  coordinator:
    build: .
    container_name: multi-agent-coordinator
    environment:
      - ENABLE_ML_OPTIMIZATION=true
      - ENABLE_AUTO_SCALING=true
      - LOG_LEVEL=INFO
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config.yaml:/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coordinator-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: coordinator-postgres
    environment:
      POSTGRES_DB: coordinator
      POSTGRES_USER: coordinator
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coordinator -d coordinator"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coordinator-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: coordinator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coordinator-network
    restart: unless-stopped

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: coordinator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - coordinator-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: coordinator-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - coordinator-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: coordinator-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - coordinator
    networks:
      - coordinator-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  coordinator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

